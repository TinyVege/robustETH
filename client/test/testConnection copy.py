from web3 import Web3


bytecode = "608060405234801561001057600080fd5b5060405161061838038061061883398101604081905261002f91610058565b600061003b82826101aa565b5050610269565b634e487b7160e01b600052604160045260246000fd5b6000602080838503121561006b57600080fd5b82516001600160401b038082111561008257600080fd5b818501915085601f83011261009657600080fd5b8151818111156100a8576100a8610042565b604051601f8201601f19908116603f011681019083821181831017156100d0576100d0610042565b8160405282815288868487010111156100e857600080fd5b600093505b8284101561010a57848401860151818501870152928501926100ed565b600086848301015280965050505050505092915050565b600181811c9082168061013557607f821691505b60208210810361015557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156101a557600081815260208120601f850160051c810160208610156101825750805b601f850160051c820191505b818110156101a15782815560010161018e565b5050505b505050565b81516001600160401b038111156101c3576101c3610042565b6101d7816101d18454610121565b8461015b565b602080601f83116001811461020c57600084156101f45750858301515b600019600386901b1c1916600185901b1785556101a1565b600085815260208120601f198616915b8281101561023b5788860151825594840194600190910190840161021c565b50858210156102595787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b6103a0806102786000396000f3fe608060405234801561001057600080fd5b50600436106100365760003560e01c8063615362111461003b578063e21f37ce14610050575b600080fd5b61004e610049366004610122565b61006e565b005b61005861007e565b60405161006591906101d3565b60405180910390f35b600061007a82826102aa565b5050565b6000805461008b90610221565b80601f01602080910402602001604051908101604052809291908181526020018280546100b790610221565b80156101045780601f106100d957610100808354040283529160200191610104565b820191906000526020600020905b8154815290600101906020018083116100e757829003601f168201915b505050505081565b634e487b7160e01b600052604160045260246000fd5b60006020828403121561013457600080fd5b813567ffffffffffffffff8082111561014c57600080fd5b818401915084601f83011261016057600080fd5b8135818111156101725761017261010c565b604051601f8201601f19908116603f0116810190838211818310171561019a5761019a61010c565b816040528281528760208487010111156101b357600080fd5b826020860160208301376000928101602001929092525095945050505050565b600060208083528351808285015260005b81811015610200578581018301518582016040015282016101e4565b506000604082860101526040601f19601f8301168501019250505092915050565b600181811c9082168061023557607f821691505b60208210810361025557634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156102a557600081815260208120601f850160051c810160208610156102825750805b601f850160051c820191505b818110156102a15782815560010161028e565b5050505b505050565b815167ffffffffffffffff8111156102c4576102c461010c565b6102d8816102d28454610221565b8461025b565b602080601f83116001811461030d57600084156102f55750858301515b600019600386901b1c1916600185901b1785556102a1565b600085815260208120601f198616915b8281101561033c5788860151825594840194600190910190840161031d565b508582101561035a5787850151600019600388901b60f8161c191681555b5050505050600190811b0190555056fea2646970667358221220a87db069bf5b5adbe9ecc94d3f66f6eb41a15b810ee259da8ce97e07be36cb4464736f6c63430008120033"
abi = [{"inputs": [{"internalType": "string","name": "_message","type": "string"}],"stateMutability": "nonpayable","type": "constructor"},{"inputs": [],"name": "message","outputs": [{"internalType": "string","name": "","type": "string"}],"stateMutability": "view","type": "function"},{"inputs": [{"internalType": "string","name": "_message","type": "string"}],"name": "writeBillboard","outputs": [],"stateMutability": "nonpayable","type": "function"}]
infura_url = 'https://goerli.infura.io/v3/ed685130fe964c39aca273439462b5ed'
w3 = Web3(Web3.HTTPProvider(infura_url))

pk = '0x4b35be94ffa17994df598a8b555d50e0971b25f94fea76c5e7b2714f3c403ffc'
acct = w3.eth.account.from_key(pk)


# After compiling the contract, initialize the contract factory:
init_bytecode = bytecode
abi = abi
Billboard  = w3.eth.contract(bytecode=init_bytecode, abi=abi)

# Deploy a contract using `transact` + the signer middleware:
tx = Billboard.constructor("gm").build_transaction({
    "from": acct.address,
    "nonce": w3.eth.get_transaction_count(acct.address),
}) 
signed_tx = w3.eth.account.sign_transaction(tx, private_key=acct.key)
tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)
receipt = w3.eth.wait_for_transaction_receipt(tx_hash)
gas_used = receipt["gasUsed"]
print(gas_used)
deployed_addr = receipt["contractAddress"]


# staingPool = w3.eth.contract(address=deployed_addr, abi=abi)



# # Manually build and sign a transaction:
# register_tx = staingPool.functions.register(4, [2322232518476478355082179417627945840901717750665249866684479270698742700263, 973931943303135868888114463333031069134546660265761666065623192082481578704]).build_transaction({
#     "from": acct.address,
#     "nonce": w3.eth.get_transaction_count(acct.address),
# })
# signed_tx = w3.eth.account.sign_transaction(register_tx, private_key=acct.key)

# # Send the raw transaction:
# tx_hash = w3.eth.send_raw_transaction(signed_tx.rawTransaction)
# info = w3.eth.wait_for_transaction_receipt(tx_hash)
# print(info)